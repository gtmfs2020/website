#+STARTUP: showall
#+OPTIONS: toc:nil
#+title: Journée 2020 du GT MFS -- Programme

* Programme

| 09h30 | ---                 | Accueil autour d'un café                                                             |
| 10h00 | Christian Cadar     | Keynote.  [[#cadar][Titre à venir]].                                                             |
| 11h00 | ---                 | /Pause/                                                                              |
| 11h20 | Barbara Fila Kordy  | [[#fila cordy][Titre à venir]].                                                                       |
| 12h05 | Itsaka Rakotonirina | [[#rakotonirina][Efficient verification of observational equivalences in finite-process calculi]].      |
| 12h35 | ---                 | /Déjeuner/                                                                           |
| 14H00 | Cătălin Hrițcu      | [[#hritcu][When Good Components Go Bad: Formally Secure Compilation Despite Dynamic Compromise]]. |
| 14h45 | Thomas Letan        | [[#letan][Titre à venir]].                                                                       |
| 15h15 | ---                 | /Pause/                                                                              |
| 15h35 | Patricia Mouy       | [[#mouy][Use of formal methods in the Common Criteria Context]].                                |
| 16h20 | Johan Laurent       | [[#laurent][Titre à venir]].                                                                       |
| 16h50 | les organisateurs   | Mot sur le GT                                                                        |
| 17h00 | ---                 | /Fin de la journée/                                                                  |

* Résumés des présentations

*** Keynote
    :PROPERTIES:
    :CUSTOM_ID: cadar
    :END:

/[[http://www.doc.ic.ac.uk/~cristic/][Christian Cadar]] -- Imperial College London/

Résumé à venir

*** Titre à venir
    :PROPERTIES:
    :CUSTOM_ID: #fila cordy
    :END:

/[[https://people.irisa.fr/Barbara.Kordy][Barbara Fila (Kordy)]] -- IRISA/

*** Efficient verification of observational equivalences in finite-process calculi
    :PROPERTIES:
    :CUSTOM_ID: rakotonirina
    :END:

/[[https://members.loria.fr/IRakotonirina/][Itsaka Rakotonirina]] -- INRIA - LORIA/

/Abstract/.
Security protocols are distributed programs used for circulating information remotely, especially for sensitive applications such as online banking, electronic voting–or any internet connection to any website. These protocols are notoriously hard to design and have a long history of flawed structures, making it possible for external parties controlling the communication network to bypass their security.
In this work we are interested in automated proofs that a given protocol is privacy preserving for a chosen notion of privacy, and number of users. Such properties are usually modelled as behavioural equivalences in concurrent process calculi (e.g. variants of the pi-calculus). We implement the DeepSec prover, an automated tool deciding such equivalences, as well as powerful optimisations that reduced its verification time by several orders of magnitude by exploiting the process symmetries that naturally arise during practical verification.

*** When Good Components Go Bad: Formally Secure Compilation Despite Dynamic Compromise
    :PROPERTIES:
    :CUSTOM_ID: hritcu
    :END:

/[[https://prosecco.gforge.inria.fr/personal/hritcu/][Cătălin Hrițcu]] -- INRIA/

/Abstract/.
We propose a new formal criterion for evaluating secure compartmentalization schemes for unsafe languages like C and C++, expressing end-to-end security guarantees for software components that may become compromised after encountering undefined behavior---for example, by accessing an array out of bounds. Our criterion is the first to model dynamic compromise in a system of mutually distrustful components with clearly specified privileges. It articulates how each component should be protected from all the others---in particular, from components that have encountered undefined behavior and become compromised.
To illustrate the model, we construct a secure compilation chain for a small unsafe language with buffers, procedures, and components, targeting a simple abstract machine with built-in compartmentalization. We propose a novel proof technique and give a machine-checked proof in Coq that this compiler satisfies our secure compilation criterion. Finally, we show that the protection guarantees offered by the compartmentalized abstract machine can be achieved at the machine-code level using either software fault isolation or a tag-based reference monitor.

/Catalin Hritcu is a researcher at Inria Paris where he works on security foundations. He is particularly interested in formal methods for security (secure compilation, compartmentalization, memory safety, security protocols, integrity, information flow), programming languages (program verification, proof assistants, type systems, semantics, formal metatheory, certified tools, property-based testing), and the design and verification of security-critical systems (reference monitors, secure compilation chains, secure hardware). He was awarded an ERC Starting Grant on formally secure compilation (https://secure-compilation.github.io), and is also actively involved in the design of the F* verification system (https://www.fstar-lang.org/), which is used for building a formally verified HTTPS stack (https://project-everest.github.io). Catalin received a PhD from Saarland University in Saarbrücken, a Habilitation from ENS Paris, and was previously also a Research Associate at University of Pennsylvania and a Visiting Researcher at Microsoft Research Redmond./

*** Titre à venir
    :PROPERTIES:
    :CUSTOM_ID: letan
    :END:

/[[https://github.com/lthms][Thomas Letan]] -- ANSSI/

*** Use of formal methods in the Common Criteria Context
    :PROPERTIES:
    :CUSTOM_ID: mouy
    :END:

/Patricia Mouy -- ANSSI/

*** Titre à venir
    :PROPERTIES:
    :CUSTOM_ID: laurent
    :END:

/[[http://lcis.grenoble-inp.fr/themes/laurent-johan][Johan Laurent]] -- LCIS/
